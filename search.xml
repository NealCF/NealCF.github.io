<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS心跳说明及调整方式</title>
      <link href="/2020/07/03/css-xin-tiao-shuo-ming-ji-diao-zheng-fang-shi/"/>
      <url>/2020/07/03/css-xin-tiao-shuo-ming-ji-diao-zheng-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="CSS心跳说明"><a href="#CSS心跳说明" class="headerlink" title="CSS心跳说明"></a>CSS心跳说明</h2><p> CSS 服务通过多种心跳机制实时监控集群状态，提供脑裂保护等基础集群服务功能。 CSS 服务有2种心跳机制： 一种是通过私有网络的<code>Network Heartbeat</code>，另一种是通过Voting Disk的<code>Disk Heartbeat</code>.<br>这2种心跳都有最大延时，对于<code>Disk Heartbeat</code>， 这个延时叫作IOT (I/O Timeout);对于<code>Network Heartbeat</code>, 这个延时叫MC(Misscount)。 这2个参数都以秒为单位，缺省时IOT大于MC</p><h2 id="MC调整方式"><a href="#MC调整方式" class="headerlink" title="MC调整方式"></a>MC调整方式</h2><pre><code>su - grid#获取当前心跳值crsctl get css misscount#设置新的心跳值crsctl set css misscount    240</code></pre><h2 id="disktimeout调整方式"><a href="#disktimeout调整方式" class="headerlink" title="disktimeout调整方式"></a>disktimeout调整方式</h2><pre><code>su - grid#获取当前心跳值crsctl get css disktimeout#设置新的心跳值crsctl set css disktimeout  300</code></pre><h2 id="asm心跳时间间隔调整"><a href="#asm心跳时间间隔调整" class="headerlink" title="asm心跳时间间隔调整"></a>asm心跳时间间隔调整</h2><pre><code>在rac正常状态下 grid账号下执行：sqlplus / as sysasmalter system set &quot;_asm_hbeatiowait&quot;=120 scope=spfile sid=&#39;*&#39;;重启crs服务/u01/app/11.2.0/grid/bin./crsctl stop cluster -all./crsctl start cluster -all检查参数：show parameter  _asm_hbeatiowait;</code></pre>]]></content>
      
      
      <categories>
          
          <category> oracle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> rac </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在MAC上通过Hexo+Github Page搭建个人博客</title>
      <link href="/2020/06/25/hexo-githubpage-for-selfblog/"/>
      <url>/2020/06/25/hexo-githubpage-for-selfblog/</url>
      
        <content type="html"><![CDATA[<p>开篇提示，此文档为自己的部署过程，顾做一次搬运工文章搬运工，也是第一次写博客练手啦。</p><h2 id="环境描述"><a href="#环境描述" class="headerlink" title="环境描述"></a>环境描述</h2><p>OS：macOS Mojave 10.14.5<br>Repositories：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a><br>评论功能：<a href="https://livere.com/" target="_blank" rel="noopener">https://livere.com/</a><br>留言板功能：<a href="https://www.daocloud.io/" target="_blank" rel="noopener">https://www.daocloud.io/</a></p><p>参考文献：<a href="https://blog.csdn.net/weixin_41160054/article/details/89531921" target="_blank" rel="noopener">https://blog.csdn.net/weixin_41160054/article/details/89531921</a></p><p>​                   <a href="https://www.jianshu.com/p/921efd17b844" target="_blank" rel="noopener">https://www.jianshu.com/p/921efd17b844</a></p><p>​                   <a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1" target="_blank" rel="noopener">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1</a></p><h2 id="仓库准备"><a href="#仓库准备" class="headerlink" title="仓库准备"></a>仓库准备</h2><h3 id="Github仓库建立"><a href="#Github仓库建立" class="headerlink" title="Github仓库建立"></a>Github仓库建立</h3><p>登录<a href="https://github.com/后，点击右上角头像，点击“Your" target="_blank" rel="noopener">https://github.com/后，点击右上角头像，点击“Your</a> repositories”后进入个人github仓库。而后点击“New”创建新的仓库，因为我们要建网站，所以我们的「Repository name」应该和我们的github名字保持一致。同时仓库属性为public。设置完成后点击下方的“create repository”<br>例如：你的账户名字为NealCF，那么我们需要填写的是NealCF.github.io。同时，因为我自己的网站已经搭建好了，所以出现了下面的警告⚠️，不用在意。</p><img src="/2020/06/25/hexo-githubpage-for-selfblog/image-20200625142434759.png" class="" title="image-20200625142434759"><img src="/2020/06/25/hexo-githubpage-for-selfblog/image-20200625142448912.png" class="" title="image-20200625142448912"><img src="/2020/06/25/hexo-githubpage-for-selfblog/image-20200625142455009.png" class="" title="image-20200625142455009"><h3 id="配置github仓库免密"><a href="#配置github仓库免密" class="headerlink" title="配置github仓库免密"></a>配置github仓库免密</h3><p>生成新的SSH keys：</p><pre><code>$ ssh-keygen -t rsa -C &quot;你的邮箱地址&quot;Generating public/private rsa key pair.Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&lt;回车&gt;Enter passphrase (empty for no passphrase):&lt;输入加密串&gt;&lt;如不想设置密码可直接回车表示为空&gt;Enter same passphrase again:&lt;再次输入加密串&gt;&lt;接着回车确认&gt;Your identification has been saved in /Users/你的名字/.ssh/id_rsa).Your public key has been saved in /Users/你的名字/.ssh/id_rsa.pub.The key fingerprint is:43:c5:5b:5f:b1:f1:50:43:ad:20:a6:92:6a:1f:9a:3a &quot;你的邮箱地址&quot; </code></pre><p>打开本地刚生成的.ssh/id_rsa.pub（若看不到，则需显示隐藏文件）,准确复制文件中所有内容。然后进入github主页，点击右上角头像进入settings，选择SSH and GPG keys，再点击New SSH Key。将内容复制进key，title可以为空。最后Add SSH key。<br>可以通过如下命令进行测试是否成功：</p><pre><code>$ ssh -T git@GitHub.com #全部复制，无需更改</code></pre><p>若出现以下提示，表示SSH key添加成功：</p><pre><code>The authenticity of host &#39;GitHub.com (207.97.227.239)&#39; can&#39;t be established.RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.Are you sure you want to continue connecting (yes/no)?&lt;输入yes&gt;Hi 你的用户名! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</code></pre><p>测试github pages是否创建成功：</p><pre><code>echo &quot;# 你的用户名.github.io&quot; &gt;&gt; README.mdgit init    git add README.mdgit commit -m &quot;first commit&quot;git remote add origin https://github.com/你的用户名/你的用户名.github.io.gitgit push -u origin master</code></pre><p>之后在浏览器中输入 【你的名字】.github.io ，如果成功出现页面，并且页面上是你刚输入的地址，那么github pages配置成功。</p><h2 id="Node-js安装"><a href="#Node-js安装" class="headerlink" title="Node.js安装"></a>Node.js安装</h2><h3 id="什么是Node-js"><a href="#什么是Node-js" class="headerlink" title="什么是Node.js"></a>什么是Node.js</h3><p>简单的说 Node.js 就是运行在服务端的 JavaScript。Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。更多Node.js的基础教程参考：<a href="https://www.runoob.com/nodejs/nodejs-tutorial.html" target="_blank" rel="noopener">https://www.runoob.com/nodejs/nodejs-tutorial.html</a></p><h3 id="Node-js的组成"><a href="#Node-js的组成" class="headerlink" title="Node.js的组成"></a>Node.js的组成</h3><p>ECMAScript（语言基础，如：语法、数据类型结构以及一些内置对象）<br>OS（操作系统）<br>file（文件系统）<br>net（网络系统）<br>database（数据库）<br>注意：</p><p>ECMAScript （是js的标准，js是它的具体实现和扩展，他描述语言的语法和基本对象，如：语法、运算符、语句、继承机制、数据结构以及一些内置对象）<br>DOM（文档对象模型，描述处理网页内容的方法和接口，将整个文档document解析成dom树供用户使用js对文档进行处理）。<br>BOM（浏览器对象模型，描述可以和浏览器窗口交互的方法和接口「对象结构」，如：window对象，history，location，navigator等）</p><h3 id="Node-js安装-1"><a href="#Node-js安装-1" class="headerlink" title="Node.js安装"></a>Node.js安装</h3><blockquote><p>需要注意的是，在我们安装<code>node.js</code>的时候，也需要同时安装<code>npm</code>。而这是最容易出问题的地方。</p></blockquote><h4 id="什么是npm"><a href="#什么是npm" class="headerlink" title="什么是npm"></a>什么是npm</h4><p>npm的全称node package manager，是一个node包的管理工具。</p><p>npm（Node Package Manager）是Node.js下的主流套件管理程式。它在Node.js v0.6.x版本之后，内建于Node系统。通过npm可以协助开发者安装、卸载、删除、更新Node.js套件。因此安装Node.js的时候最好一起也安装npm!</p><h4 id="如何安装Node-js和npm"><a href="#如何安装Node-js和npm" class="headerlink" title="如何安装Node.js和npm"></a>如何安装Node.js和npm</h4><blockquote><p>使用一个node version manager来安装 <code>Node.js</code>和<code>npm</code>。</p></blockquote><p>第一步：安装nvm和确认是否成功</p><pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash</code></pre><p>然后，输入代码</p><pre><code>command -v nvm</code></pre><p>返回结果为nvm：</p><img src="/2020/06/25/hexo-githubpage-for-selfblog/image-20200625144450053.png" class="" title="image-20200625144450053"><p>若无此返回结果可重启terminal后尝试。</p><p>第二步：用nvm安装node</p><pre><code>nvm install node # &quot;node&quot; is an alias for the latest version</code></pre>{% asset_img image-20200625144654479.png image-20200625144654479 %}<h2 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h2><p>hexo的安装只需要使用npm进行安装，包的名字为hexo-cli</p><pre><code>npm install -g hexo-cli</code></pre><h2 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h2><p>安装 Hexo 完成后，我们可以在本地新建一个文件夹或采用下载仓库的方式进行完整初始化。</p><h3 id="下载仓库"><a href="#下载仓库" class="headerlink" title="下载仓库"></a>下载仓库</h3><p>规划好网站在本地的存放位置后，将github上的仓库clone下来，进行网站初始化：</p><p>备注：我规划的位置为/Users/{用户名}/Documents下。</p><pre><code>$ cd /Users/cjm/Documents/$ git clone https://github.com/yourGithubName/yourGithubName.github.io</code></pre><h3 id="清空本地仓库目录，进行网站初始化"><a href="#清空本地仓库目录，进行网站初始化" class="headerlink" title="清空本地仓库目录，进行网站初始化"></a>清空本地仓库目录，进行网站初始化</h3><blockquote><p>必须确认当前工作目录是否为本地仓库目录。或可采用mv进行目录重命名后新建原目录的方式</p></blockquote><pre><code>进入本地仓库目录：$ cd /Users/cjm/Documents/NealCF.github.io/确认目录结构：$ pwd/Users/cjm/Documents/NealCF.github.io确认目录中文件内容（包含隐藏文件）$ ls -al清空本地仓库内容$ rm -rf *</code></pre><h3 id="Hexo初始化"><a href="#Hexo初始化" class="headerlink" title="Hexo初始化"></a>Hexo初始化</h3><p>建立初始化方式如下：</p><pre><code>$ cd /Users/cjm/Documents/NealCF.github.io/$ hexo init ./$ hexo generate</code></pre><p>下面介绍几个常用的hexo命令(括号里面的命令为缩写形式，效果一样)：</p><ol><li>hexo generate(hexo g) #生成静态文件，会在当前目录下生成一个新的叫做public的文件夹</li><li>hexo new “postTitle” #新建博客文章</li><li>hexo new page “pageTitle” #新建1个页面</li><li>hexo server(hexo s) #启动本地web服务预览(加参数–debug,用于调试，如：hexo s –debug)</li><li>hexo deploy(hexo d) #部署播客到远端（比如Github,coding,heroku等平台）</li></ol><p>在命令行中输入<code>hexo s --debug</code>后，运行成功后，可以在浏览器中输入：<a href="http://localhost:4000看到自己新建的博客了。">http://localhost:4000看到自己新建的博客了。</a></p><h3 id="更改主题"><a href="#更改主题" class="headerlink" title="更改主题"></a>更改主题</h3><blockquote><p>在本地仓库的根目录下存在_config.yml，同时在theme下的每个主图目录内仍有_config.yml。根config.yml为全局配置，主题的config.yml为主题自定义配置。配置过程中注意区分。</p></blockquote><p>一般我们初始化博客的文件夹后，文件结构大概如下：</p><pre><code>$ lltotal 1352-rw-r--r--    1 builder34  staff    32B  4 14 01:34 README.md-rw-r--r--    1 builder34  staff   2.3K  6 25 10:40 _config.yml-rw-r--r--    1 builder34  staff    32K  6 26 15:50 db.json-rw-r--r--    1 builder34  staff   458K  6 26 15:56 debug.logdrwxr-xr-x  293 builder34  staff   9.2K  6 25 10:42 node_modules-rw-r--r--    1 builder34  staff   110K  6 22 23:59 package-lock.json-rw-r--r--    1 builder34  staff   564B  6 22 23:59 package.jsondrwxr-xr-x   14 builder34  staff   448B  6 25 10:40 publicdrwxr-xr-x    5 builder34  staff   160B  4 17 23:12 scaffoldsdrwxr-xr-x    3 builder34  staff    96B  6 25 10:57 sourcedrwxr-xr-x    6 builder34  staff   192B  6 25 11:33 themes</code></pre><p>themes文件夹是我们博客主题的存放地方，大家可以在<a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a>  上选择自己喜欢的主题，建议选择文档描述清楚的，可以减轻自己的配置测试的次数。我所使用的是：<a href="https://github.com/blinkfox/hexo-theme-matery" target="_blank" rel="noopener">hexo-theme-matery</a>。 </p><pre><code>$ cd themes/$ git clone https://github.com/blinkfox/hexo-theme-matery.git</code></pre><p>在Hexo配置文件（$your_blog_path/_config.yml）中把主题设置修改为hexo-theme-matery。</p><pre><code>修改 Hexo 根目录下的 _config.yml 的 theme 的值：theme: hexo-theme-matery</code></pre><p>_config.yml 文件的其它修改建议:<br>请修改 _config.yml 的 url 的值为你的网站主 URL（如：<a href="http://xxx.github.io）。" target="_blank" rel="noopener">http://xxx.github.io）。</a><br>建议修改两个 per_page 的分页条数值为 6 的倍数，如：12、18 等，这样文章列表在各个屏幕下都能较好的显示。<br>如果你是中文用户，则建议修改 language 的值为 zh-CN，timezone的值为 Asia/Shanghai。</p><p>具体配置文档为：<a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1" target="_blank" rel="noopener">https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/#toc-heading-1</a></p><h3 id="Hexo部署到github"><a href="#Hexo部署到github" class="headerlink" title="Hexo部署到github"></a>Hexo部署到github</h3><p>安装hexo deployer 插件</p><pre><code>使用 hexo deploy 命名部署到github所需要的hexo插件$ npm install hexo-deployer-git --save</code></pre><p>配置根_config.yml的deloyment:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Deployment</span><span class="token comment" spellcheck="true">## Docs: https://hexo.io/docs/deployment.html</span>deploy:  type: <span class="token function">git</span>  repo: https://github.com/your_githubName/your_githubName.github.io.git</code></pre><p>生成静态页面并部署到远端github pages</p><pre class=" language-ruby"><code class="language-ruby"><span class="token comment" spellcheck="true">#删除静态文件,即 public 文件</span>$ hexo clean<span class="token comment" spellcheck="true">#生成静态文件,即 public 文件</span>$ hexo generate<span class="token comment" spellcheck="true">#部署到远程站点</span>$ hexo deploy<span class="token comment" spellcheck="true">#也可以使用组合命令(替代上面2条命令)：生成静态命令并部署到远程站点</span>$ hexo deploy <span class="token operator">-</span>g</code></pre><h2 id="设置博客域名"><a href="#设置博客域名" class="headerlink" title="设置博客域名"></a>设置博客域名</h2><p>进入自己博客的repository仓库，默认博客域名为<a href="https://your_githubName.github.io。" target="_blank" rel="noopener">https://your_githubName.github.io。</a> 可以通过类似如下的页面进行设置自定义域名：</p><img src="/2020/06/25/hexo-githubpage-for-selfblog/image-20200625152625436.png" class="" title="image-20200625152625436"><img src="/2020/06/25/hexo-githubpage-for-selfblog/image-20200625152629998.png" class="" title="image-20200625152629998"><p>所填的自定义域名是需要自己已经注册，并且如果勾选了 Enforce HTTPS 的话，你的域名是需要ssl证书。</p><h2 id="注意事项-自行判读是否配置"><a href="#注意事项-自行判读是否配置" class="headerlink" title="注意事项(自行判读是否配置)"></a>注意事项(自行判读是否配置)</h2><h3 id="上传README-md并防止被渲染成文章"><a href="#上传README-md并防止被渲染成文章" class="headerlink" title="上传README.md并防止被渲染成文章"></a>上传README.md并防止被渲染成文章</h3><pre><code>#在博客根目录下，新建或编辑你的README.md文件$ vim README.md$ mv README.md ./sources#修改_config.yml文件,设置不渲染的文件$ vim _config.ymlskip_render: README.md</code></pre><h3 id="自定义域名重置问题"><a href="#自定义域名重置问题" class="headerlink" title="自定义域名重置问题"></a>自定义域名重置问题</h3><p>每次<code>hexo deploy</code>后Github Pages自定义域名会被重置，需要在sources目录下新建CNAME文件(注意为全大写无后缀的文件哦),文件内容为你需要映射到的自定义域名：</p><pre><code>$ vim CNAMEblog.monbuilder.top$ mv CNAME ./sources</code></pre><h2 id="配合Hexo配置Typora"><a href="#配合Hexo配置Typora" class="headerlink" title="配合Hexo配置Typora"></a>配合Hexo配置Typora</h2><p>使用typora添加图片配置，参考<a href="https://wanglin0c.github.io/2020/06/25/blog_hexo/" target="_blank" rel="noopener">https://wanglin0c.github.io/2020/06/25/blog_hexo/</a></p><p>配置typora的图像设置部分，偏好设置&gt;图像，选择复制到指定路径，并勾选”优先使用相对路径”，这样在粘贴图片到文档上的时候，就会在文档所在目录创建一个同名的目录存放该文档上的图片，并且图片的路径显示为该文件夹的相对路径，如“blog_hexo/xxxxx.png”，此时typora就可以显示该相对路径的图片，如图：</p><img src="/2020/06/25/hexo-githubpage-for-selfblog/image-20200625153331989.png" class="" title="image-20200625153331989"><p>修改hexo配置，如我的项目myblog_web目录下的配置文件_config.yml, 修改post_asset_folder的值为true，即使用相对路径。</p><pre><code>post_asset_folder: true1</code></pre><p>本地安装插件， 执行命令<code>npm install hexo-image-link --save</code> 解决typora图片路径问题，本地预览的时候就可以看到图片了。</p>]]></content>
      
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mac </tag>
            
            <tag> Hexo </tag>
            
            <tag> Github Page </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/06/25/hello-world/"/>
      <url>/2020/06/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><pre><code>---title: typora-vue-theme主题介绍date: 2018-06-25 09:25:00author: Nealimg: /source/images/xxx.jpgtop: truecover: truecoverImg: /images/1.jpgtoc: falsesummary: 这是你自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要categories: Markdowntags:  - Typora  - Markdown---</code></pre><pre><code>---title: 磁盘无分区xfs_growfs扩展文件系统categories: 操作系统tags:   - xfs_growfs---</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>磁盘无分区xfs_growfs扩展文件系统</title>
      <link href="/2020/04/22/ci-pan-wu-fen-qu-xfs-growfs-kuo-zhan-wen-jian-xi-tong/"/>
      <url>/2020/04/22/ci-pan-wu-fen-qu-xfs-growfs-kuo-zhan-wen-jian-xi-tong/</url>
      
        <content type="html"><![CDATA[<h2 id="清除分区信息"><a href="#清除分区信息" class="headerlink" title="清除分区信息"></a>清除分区信息</h2><pre><code>[root@disk-test ~]# umount /mnt[root@disk-test ~]# dd if=/dev/zero of=/dev/vdb bs=1M count=10001000+0 records in1000+0 records out1048576000 bytes (1.0 GB) copied, 15.9085 s, 65.9 MB/s[root@disk-test ~]# [root@disk-test ~]# [root@disk-test ~]# [root@disk-test ~]# lsblkNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsr0     11:0    1 1024M  0 rom  sr1     11:1    1  464K  0 rom  vda    253:0    0   40G  0 disk └─vda1 253:1    0   40G  0 part /vdb    253:16   0  110G  0 disk </code></pre><h2 id="格式化磁盘并挂载"><a href="#格式化磁盘并挂载" class="headerlink" title="格式化磁盘并挂载"></a>格式化磁盘并挂载</h2><pre><code>[root@disk-test ~]# mkfs.xfs /dev/vdbmeta-data=/dev/vdb               isize=512    agcount=4, agsize=7208960 blks         =                       sectsz=512   attr=2, projid32bit=1         =                       crc=1        finobt=0, sparse=0data     =                       bsize=4096   blocks=28835840, imaxpct=25         =                       sunit=0      swidth=0 blksnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1log      =internal log           bsize=4096   blocks=14080, version=2         =                       sectsz=512   sunit=0 blks, lazy-count=1realtime =none                   extsz=4096   blocks=0, rtextents=0[root@disk-test ~]# [root@disk-test ~]# mount /dev/vdb /mnt </code></pre><h2 id="确认分区信息"><a href="#确认分区信息" class="headerlink" title="确认分区信息"></a>确认分区信息</h2><pre><code>[root@disk-test ~]# lsblkNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsr0     11:0    1 1024M  0 rom  sr1     11:1    1  464K  0 rom  vda    253:0    0   40G  0 disk └─vda1 253:1    0   40G  0 part /vdb    253:16   0  110G  0 disk /mnt[root@disk-test ~]# df -ThFilesystem     Type      Size  Used Avail Use% Mounted on/dev/vda1      ext4       40G  1.2G   37G   4% /devtmpfs       devtmpfs  873M     0  873M   0% /devtmpfs          tmpfs     883M     0  883M   0% /dev/shmtmpfs          tmpfs     883M   17M  866M   2% /runtmpfs          tmpfs     883M     0  883M   0% /sys/fs/cgrouptmpfs          tmpfs     177M     0  177M   0% /run/user/0/dev/vdb       xfs       110G   33M  110G   1% /mnt</code></pre><h2 id="后台扩容磁盘"><a href="#后台扩容磁盘" class="headerlink" title="后台扩容磁盘"></a>后台扩容磁盘</h2><pre><code>[root@disk-test ~]# lsblkNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINTsr0     11:0    1 1024M  0 rom  sr1     11:1    1  464K  0 rom  vda    253:0    0   40G  0 disk └─vda1 253:1    0   40G  0 part /vdb    253:16   0  120G  0 disk /mnt</code></pre><h2 id="确认文件系统没有变化"><a href="#确认文件系统没有变化" class="headerlink" title="确认文件系统没有变化"></a>确认文件系统没有变化</h2><pre><code>[root@disk-test ~]# df -ThFilesystem     Type      Size  Used Avail Use% Mounted on/dev/vda1      ext4       40G  1.2G   37G   4% /devtmpfs       devtmpfs  873M     0  873M   0% /devtmpfs          tmpfs     883M     0  883M   0% /dev/shmtmpfs          tmpfs     883M   17M  866M   2% /runtmpfs          tmpfs     883M     0  883M   0% /sys/fs/cgrouptmpfs          tmpfs     177M     0  177M   0% /run/user/0/dev/vdb       xfs       110G   33M  110G   1% /mnt</code></pre><h2 id="自增涨文件系统"><a href="#自增涨文件系统" class="headerlink" title="自增涨文件系统"></a>自增涨文件系统</h2><pre><code>[root@disk-test ~]# xfs_growfs /dev/vdbmeta-data=/dev/vdb               isize=512    agcount=4, agsize=7208960 blks         =                       sectsz=512   attr=2, projid32bit=1         =                       crc=1        finobt=0 spinodes=0data     =                       bsize=4096   blocks=28835840, imaxpct=25         =                       sunit=0      swidth=0 blksnaming   =version 2              bsize=4096   ascii-ci=0 ftype=1log      =internal               bsize=4096   blocks=14080, version=2         =                       sectsz=512   sunit=0 blks, lazy-count=1realtime =none                   extsz=4096   blocks=0, rtextents=0data blocks changed from 28835840 to 31457280</code></pre><h2 id="确认文件系统大小"><a href="#确认文件系统大小" class="headerlink" title="确认文件系统大小"></a>确认文件系统大小</h2><pre><code>[root@disk-test ~]# df -ThFilesystem     Type      Size  Used Avail Use% Mounted on/dev/vda1      ext4       40G  1.2G   37G   4% /devtmpfs       devtmpfs  873M     0  873M   0% /devtmpfs          tmpfs     883M     0  883M   0% /dev/shmtmpfs          tmpfs     883M   17M  866M   2% /runtmpfs          tmpfs     883M     0  883M   0% /sys/fs/cgrouptmpfs          tmpfs     177M     0  177M   0% /run/user/0/dev/vdb       xfs       120G   33M  120G   1% /mnt</code></pre><h2 id="写文件系统，确认没问题"><a href="#写文件系统，确认没问题" class="headerlink" title="写文件系统，确认没问题"></a>写文件系统，确认没问题</h2><pre><code>[root@disk-test ~]# cd /mnt/[root@disk-test mnt]# touch 1.txt</code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> xfs_growfs </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
